
/*============================================================================
Filename : touch_api_ptc.h
Project : QTouch Modular Library
Purpose : Includes the Module API header files based on the configured modules,
          prototypes for touch.c file and Application helper API functions

This file is part of QTouch Modular Library Release 7.5 application.

Important Note: Do not edit this file manually.
                Use QTouch Configurator within Atmel Start to apply any
                modifications to this file.

Usage License: Refer license.h file for license information
Support: Visit http://www.microchip.com/support/hottopics.aspx
               to create MySupport case.

------------------------------------------------------------------------------
Copyright (c) 2021 Microchip. All rights reserved.
------------------------------------------------------------------------------
============================================================================*/

#ifndef TOUCH_API_PTC_H
#define TOUCH_API_PTC_H

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/*----------------------------------------------------------------------------
 *     include files
 *----------------------------------------------------------------------------*/

#include "qtm_common_components_api.h"
#include "qtm_acq_t321x_0x0017_api.h"
#include "qtm_touch_key_0x0002_api.h"
#include "qtm_freq_hop_0x0006_api.h"
#ifdef OBJECT_T9
#include "qtm_scroller_0x000b_api.h"
#endif

/*----------------------------------------------------------------------------
 *   prototypes
 *----------------------------------------------------------------------------*/
/* Application Helper API's */
uint16_t get_sensor_node_signal(uint16_t sensor_node);
void     update_sensor_node_signal(uint16_t sensor_node, uint16_t new_signal);
uint16_t get_sensor_node_reference(uint16_t sensor_node);
void     update_sensor_node_reference(uint16_t sensor_node, uint16_t new_reference);
uint16_t get_sensor_node_delta(uint16_t sensor_node);
uint16_t get_sensor_cc_val(uint16_t sensor_node);
void     update_sensor_cc_val(uint16_t sensor_node, uint16_t new_cc_value);
uint8_t  get_sensor_state(uint16_t sensor_node);
void     update_sensor_state(uint16_t sensor_node, uint8_t new_state);
void     calibrate_node(uint16_t sensor_node);
uint8_t  get_scroller_state(uint16_t sensor_node);
uint16_t get_scroller_position(uint16_t sensor_node);
/* USE_MPTT_WRAPPER */
void     calibrate_node_post(uint8_t sensor_node);
void     qtm_init_sensor_key_post(uint8_t sensor_node);
#ifdef TOUCH_API_SCROLLER_H
void	 qtm_init_scroller_module_post(void);
#endif

void	touch_timer_handler(void);
void	touch_init(void);
/* USE_MPTT_WRAPPER */
void	touch_process(void);
uint8_t	touch_sleep(void);
void	touch_suspend(uint8_t suspend);
void	touch_inject_event(void);
int8_t	touch_state_idle(void);
int8_t  touch_state_sleep(void);

#ifdef __cplusplus
}
#endif

#endif /* TOUCH_API_PTC_H */
